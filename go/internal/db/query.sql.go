// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createChatgptMessage = `-- name: CreateChatgptMessage :exec
INSERT INTO chatgpt_messages (
    message_type, json_body, user_name, mastodon_status_id
) VALUES (?, ?, ?, ?)
`

type CreateChatgptMessageParams struct {
	MessageType      string
	JsonBody         string
	UserName         string
	MastodonStatusID sql.NullString
}

func (q *Queries) CreateChatgptMessage(ctx context.Context, arg CreateChatgptMessageParams) error {
	_, err := q.db.ExecContext(ctx, createChatgptMessage,
		arg.MessageType,
		arg.JsonBody,
		arg.UserName,
		arg.MastodonStatusID,
	)
	return err
}

const createChatgptMessages = `-- name: CreateChatgptMessages :copyfrom
INSERT INTO chatgpt_messages (
    message_type, json_body, user_name, mastodon_status_id
) VALUES (?, ?, ?, ?)
`

type CreateChatgptMessagesParams struct {
	MessageType      string
	JsonBody         string
	UserName         string
	MastodonStatusID sql.NullString
}

const createChatgptThread = `-- name: CreateChatgptThread :exec
INSERT INTO chatgpt_threads (id) VALUES (NULL)
`

func (q *Queries) CreateChatgptThread(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, createChatgptThread)
	return err
}

const createChatgptThreadRel = `-- name: CreateChatgptThreadRel :exec
INSERT INTO chatgpt_threads_rel (
    thread_id, chatgpt_message_id, sequence_num
) VALUES (?, ?, ?)
`

type CreateChatgptThreadRelParams struct {
	ThreadID         int32
	ChatgptMessageID int32
	SequenceNum      int32
}

func (q *Queries) CreateChatgptThreadRel(ctx context.Context, arg CreateChatgptThreadRelParams) error {
	_, err := q.db.ExecContext(ctx, createChatgptThreadRel, arg.ThreadID, arg.ChatgptMessageID, arg.SequenceNum)
	return err
}

const findChatgptMessageByMastodonStatusId = `-- name: FindChatgptMessageByMastodonStatusId :one
SELECT id, message_type, json_body, user_name, mastodon_status_id, created_at, updated_at
FROM chatgpt_messages
WHERE mastodon_status_id = ?
`

func (q *Queries) FindChatgptMessageByMastodonStatusId(ctx context.Context, mastodonStatusID sql.NullString) (ChatgptMessage, error) {
	row := q.db.QueryRowContext(ctx, findChatgptMessageByMastodonStatusId, mastodonStatusID)
	var i ChatgptMessage
	err := row.Scan(
		&i.ID,
		&i.MessageType,
		&i.JsonBody,
		&i.UserName,
		&i.MastodonStatusID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getChatgptMessagesByThreadId = `-- name: GetChatgptMessagesByThreadId :many
SELECT chatgpt_messages.id, chatgpt_messages.message_type, chatgpt_messages.json_body, chatgpt_messages.user_name, chatgpt_messages.mastodon_status_id, chatgpt_messages.created_at, chatgpt_messages.updated_at, chatgpt_threads_rel.sequence_num
FROM chatgpt_messages
INNER JOIN chatgpt_threads_rel ON chatgpt_messages.id = chatgpt_threads_rel.chatgpt_message_id
WHERE chatgpt_threads_rel.thread_id = ?
`

type GetChatgptMessagesByThreadIdRow struct {
	ID               uint64
	MessageType      string
	JsonBody         string
	UserName         string
	MastodonStatusID sql.NullString
	CreatedAt        sql.NullTime
	UpdatedAt        sql.NullTime
	SequenceNum      int32
}

func (q *Queries) GetChatgptMessagesByThreadId(ctx context.Context, threadID int32) ([]GetChatgptMessagesByThreadIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getChatgptMessagesByThreadId, threadID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetChatgptMessagesByThreadIdRow
	for rows.Next() {
		var i GetChatgptMessagesByThreadIdRow
		if err := rows.Scan(
			&i.ID,
			&i.MessageType,
			&i.JsonBody,
			&i.UserName,
			&i.MastodonStatusID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SequenceNum,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastInsertedChatgptMessage = `-- name: GetLastInsertedChatgptMessage :one
SELECT id, message_type, json_body, user_name, mastodon_status_id, created_at, updated_at
FROM chatgpt_messages
WHERE id = LAST_INSERT_ID()
`

func (q *Queries) GetLastInsertedChatgptMessage(ctx context.Context) (ChatgptMessage, error) {
	row := q.db.QueryRowContext(ctx, getLastInsertedChatgptMessage)
	var i ChatgptMessage
	err := row.Scan(
		&i.ID,
		&i.MessageType,
		&i.JsonBody,
		&i.UserName,
		&i.MastodonStatusID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLastInsertedChatgptThreadId = `-- name: GetLastInsertedChatgptThreadId :one
SELECT LAST_INSERT_ID() AS id
`

func (q *Queries) GetLastInsertedChatgptThreadId(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getLastInsertedChatgptThreadId)
	var id int64
	err := row.Scan(&id)
	return id, err
}
